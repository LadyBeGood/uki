import uki/app


is-prime num:
    when num !> 1
        exit wrong
    else num = 2
        exit right
    else (remainder num, 2) = 0
        exit wrong

    loop 3_(power num, 0.5)_2 with i
        when (remainder num, i) = 0
            exit wrong

    exit right


print-primes num-1, num-2: 
    write "Prime numbers from |num-1| to |num-2| are:"
    
    loop num-1_num-2 with num
        when is-prime num
            write num


num-1: to-number prompt "What is your 1st number" 
num-2: to-number prompt "What is your 2nd number"

print-primes num-1, num-2





# Unoptimised trial division algorithm
is-prime number:
    when number !> 1
        exit wrong
    
    loop 2_<number with i
        when (remainder number, i) = 0
            exit wrong
    
    exit right


prime-checker:
    # The value of input element is a string
    number: ""
    result: ""

    check:
        try
            result = "|number| is |when !is-prime to-number number: "not "|a prime number"
        fix
            # In case user passed an empty string or illegal characters as `number`
            result = "Please enter a valid positive integer"
    
    exit % element
        heading
            heading-type: 2
            text-content: "Prime Number Checker"
        
        input
            input-type: "number"
            input-placeholder: "Enter a number"
            input-value::number
        
        button
            event-click: {check}
            text-content: "Check"
        
        element 
            text-content::result



render % origin 
    meta-title: "Prime Number Checker"
    text-font: Arial, sans-serif
    box-colour: #F4F4F4
    box-inner-x: 15
    custom-script: <script src="https://kit.fontawesome.com/24c3243e9d.js" crossorigin="anonymous"></script>

    prime-checker centre







meta-title: "Title"
meta-description: "Page description"
meta-robots: "index, follow"
meta-goopen-graphlebot: "index, follow"
meta-theme-colour: "#ffffff"
meta-colour-scheme: "light dark"
meta-format-detection: "telephone = no"
meta-referrer: "no-referrer"
meta-application-name: "App Name"
meta-http-equiv="refresh: "30"

open-graph-title: "Open Graph Title"
open-graph-description: "Open Graph Description"
open-graph-type: "website"
open-graph-url: "https://example.com"
open-graph-image: "https://example.com/image.jpg"

twitter-card: "summary_large_image"
twitter-title: "Twitter Title"
twitter-description: "Twitter Description"
twitter-image: "https://example.com/image.jpg"




webapp:
    count: 0
    
    exit % button
        text-content: "Counter |$count|"
        event-click: {count = count + 1}
        box-size: 100px 35px


render % origin
    meta-title: "Counter app"
    meta-description: "Example of a simple counter app made in Utkrisht language"
    
    webapp centre



<!-- This is more or less what i want -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Counter app</title>
    <meta name="description" content="Example of a simple counter app made in Utkrisht language" />
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            font-family: sans-serif;
            background: #f9f9f9;
        }
        button {
            width: 100px;
            height: 35px;
            font-size: 14px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <button id="counter">Counter 0</button>

    <script>
        let count = 0;
        const button = document.getElementById("counter");

        button.addEventListener("click", () => {
            count += 1;
            button.textContent = `Counter ${count}`;
        });
    </script>
</body>
</html>

